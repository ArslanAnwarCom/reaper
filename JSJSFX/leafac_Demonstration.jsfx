desc:leafac_Demonstration

slider1:slider.page=0<0,12,1{Noises,Bézier Curves,_.color 1,_.color 2,_.color 3,_.color 4,_.color 5,Tests,Circular Buffer (Delay),RMS,Filters · Biquad · RBJ,Filters · Biquad · SVF,Discrete Fourier Transform}>Page

slider3:slider.delay.length=48000<0,48000,100>Delay Length (Samples)

slider4:slider.rms=0<-90,12,0.1>RMS (dB)

slider5:slider.filter.biquad.rbj.type=0<0,8,1{Low-Pass,High-Pass,Band-Pass (constant skirt gain / peak gain = Q),Band-Pass (constant 0 dB peak gain),Notch,All-Pass,Peaking,Low-Shelf,High-Shelf}>Type
slider6:slider.filter.biquad.rbj.frequency=1000<20,20000,100>Frequency (Hz)
slider7:slider.filter.biquad.rbj.gain=0<-24,24,0.1>Gain (dB)
slider8:slider.filter.biquad.rbj.width.type.non_shelving=0<0,1,1{Q,Bandwidth}>Width Type
slider9:slider.filter.biquad.rbj.width.type.shelving=0<0,2,1{Q,Bandwidth,S}>Width Type
slider10:slider.filter.biquad.rbj.width.value.Q=0.71<0.1,40,0.01}>Q
slider11:slider.filter.biquad.rbj.width.value.bandwidth=2<0.01,4,0.01}>Bandwidth
slider12:slider.filter.biquad.rbj.width.value.S=1<0.01,4,0.01}>S (dB/octave)

slider13:slider.noises.type=0<0,2,1{White,Pink,Brown}>Type
slider14:slider.noises.gain.db=-60<-60,12,1>Gain (dB)

import leafac.jsfx-inc

@init

_.init();

slider.page.noises = 0;
slider.page.bezier_curves = 1;
slider.page.color.1 = 2;
slider.page.color.2 = 3;
slider.page.color.3 = 4;
slider.page.color.4 = 5;
slider.page.color.5 = 6;
slider.page.tests = 7;
slider.page.circular_buffer = 8;
slider.page.rms = 9;
slider.page.filters.biquad.rbj = 10;
slider.page.filters.biquad.svf = 11;
slider.page.discrete_fourier_transform = 12;

constant.delay.length.maximum = 48000;

slider.noises.type.white = 0;
slider.noises.type.pink = 1;
slider.noises.type.brown = 2;

#instance.tests = "";

#instance.tests += "_.milliseconds_to_samples(): ";
_.milliseconds_to_samples(1000) == srate &&
_.milliseconds_to_samples(500) == srate / 2 &&
_.milliseconds_to_samples(0) == 0
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.samples_to_milliseconds(): ";
_.samples_to_milliseconds(srate) == 1000 &&
_.samples_to_milliseconds(srate / 2) == 500 &&
_.samples_to_milliseconds(0) == 0
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.amplitude_to_db(): ";
_.amplitude_to_db(0) == _.db.minimum &&
_.amplitude_to_db(0.5) == -6.02059 &&
_.amplitude_to_db(-0.5) == -6.02059 &&
_.amplitude_to_db(1) == 0 &&
_.amplitude_to_db(-1) == 0 &&
_.amplitude_to_db(2) == 6.02059 &&
_.amplitude_to_db(-2) == 6.02059
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.db_to_amplitude(): ";
_.db_to_amplitude(-6.02059) == 0.5 &&
_.db_to_amplitude(0) == 1 &&
_.db_to_amplitude(6.02059) == 2
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.radians_to_degrees(): ";
_.radians_to_degrees( 0   * $pi / 2) ==    0 &&
_.radians_to_degrees( 1   * $pi / 2) ==   90 &&
_.radians_to_degrees( 2   * $pi / 2) ==  180 &&
_.radians_to_degrees( 3   * $pi / 2) ==  270 &&
_.radians_to_degrees( 0.5 * $pi / 2) ==   45 &&
_.radians_to_degrees(-0   * $pi / 2) == -  0 &&
_.radians_to_degrees(-1   * $pi / 2) == - 90 &&
_.radians_to_degrees(-2   * $pi / 2) == -180 &&
_.radians_to_degrees(-3   * $pi / 2) == -270 &&
_.radians_to_degrees(-0.5 * $pi / 2) == - 45
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.degrees_to_radians(): ";
_.degrees_to_radians(   0) ==  0   * $pi / 2 &&
_.degrees_to_radians(  90) ==  1   * $pi / 2 &&
_.degrees_to_radians( 180) ==  2   * $pi / 2 &&
_.degrees_to_radians( 270) ==  3   * $pi / 2 &&
_.degrees_to_radians(  45) ==  0.5 * $pi / 2 &&
_.degrees_to_radians(-  0) == -0   * $pi / 2 &&
_.degrees_to_radians(- 90) == -1   * $pi / 2 &&
_.degrees_to_radians(-180) == -2   * $pi / 2 &&
_.degrees_to_radians(-270) == -3   * $pi / 2 &&
_.degrees_to_radians(- 45) == -0.5 * $pi / 2
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.imaginary.magnitude(): ";
_.imaginary.magnitude( 1,  0) == 1 &&
_.imaginary.magnitude( 0,  1) == 1 &&
_.imaginary.magnitude(-1,  0) == 1 &&
_.imaginary.magnitude( 0, -1) == 1 &&
_.imaginary.magnitude( 3,  4) == 5
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.imaginary.phase(): ";
_.imaginary.phase( 1,  0) ==  0   * $pi / 2 &&
_.imaginary.phase( 0,  1) ==  1   * $pi / 2 &&
_.imaginary.phase(-1,  0) ==  2   * $pi / 2 &&
_.imaginary.phase( 0, -1) == -1   * $pi / 2 &&
_.imaginary.phase(-1, -1) == -1.5 * $pi / 2
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "Hyperbolic Functions: ";
_.sinh(10) == 11013.23287 &&
_.cosh(10) == 11013.23292 &&
_.tanh(10) == 0.99999 &&
_.coth(10) == 1.00000 &&
_.sech(10) == 0.00009 &&
_.csch(10) == 0.00009
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "Inverse Hyperbolic Functions: ";
_.arsinh(10) == 2.99822 &&
_.arcosh(10) == 2.99322 &&
_.artanh(0.75) == 0.97295 &&
_.arcoth(10) == 0.10033 &&
_.arsech(0.75) == 0.79536 &&
_.arcsch(10) == 0.09983
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.count_trailing_zeros(): ";
_.count_trailing_zeros(1 /* 0001 */) == 0 &&
_.count_trailing_zeros(2 /* 0010 */) == 1 &&
_.count_trailing_zeros(3 /* 0011 */) == 0 &&
_.count_trailing_zeros(4 /* 0100 */) == 2 &&
_.count_trailing_zeros(5 /* 0101 */) == 0 &&
_.count_trailing_zeros(6 /* 0110 */) == 1 &&
_.count_trailing_zeros(7 /* 0111 */) == 0 &&
_.count_trailing_zeros(8 /* 1000 */) == 3
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.follower(): ";
_.follower(0.5, 0.7, 0.3) == 0.7 &&
_.follower(0.7, 0.5, 0.3) == 0.5 &&
_.follower(0.5, 0.7, 0.1) == 0.6 &&
_.follower(0.7, 0.5, 0.1) == 0.6
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.map(): ";
_.map(0.5, -1, 1, 20, 60) == 50
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.distance.euclidian(): ";
_.distance.euclidian(6, 5, 3, 9) == 5
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.enumeration: ";
init.enumeration_1 = _.enumeration();
init.enumeration_2 = _.enumeration();
init.enumeration_1 != init.enumeration_2
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.memory: ";
init.memory = _.memory.new(3);
init.memory[0] = 10;
init.memory[1] = 11;
init.memory[2] = 12;
init.memory[0] == 10 &&
init.memory[1] == 11 &&
init.memory[2] == 12
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.box: ";
init.box = _.box();
init.box[] = 20;
init.box[] == 20
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.struct: ";
init.struct_definition = _.struct.define();
init.struct_definition.field_1 = _.struct.define.field(init.struct_definition);
init.struct_definition.field_2 = _.struct.define.field(init.struct_definition);
init.struct = _.struct.new(init.struct_definition);
init.struct[init.struct_definition.field_1] = 101;
init.struct[init.struct_definition.field_2] = 102;
init.struct[init.struct_definition.field_1] == 101 &&
init.struct[init.struct_definition.field_2] == 102
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.array: ";
init.array = _.array.new(3);
init.array[_.array.struct.data][0] = 200;
init.array[_.array.struct.data][1] = 201;
init.array[_.array.struct.data][2] = 202;
init.array[_.array.struct.size] === 3 &&
init.array[_.array.struct.data][0] == 200 &&
init.array[_.array.struct.data][1] == 201 &&
init.array[_.array.struct.data][2] == 202
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.circular_buffer: ";
init.circular_buffer = _.circular_buffer.new(3);
init.circular_buffer.array = _.array.new(3);
_.circular_buffer.push(init.circular_buffer, 110);
_.circular_buffer.push(init.circular_buffer, 111);
_.circular_buffer.push(init.circular_buffer, 112);
_.circular_buffer.push(init.circular_buffer, 113);
_.circular_buffer.to_array(init.circular_buffer, init.circular_buffer.array);
init.circular_buffer[_.circular_buffer.struct.index] == 1 &&
_.circular_buffer.get(init.circular_buffer, -0) == 113 &&
_.circular_buffer.get(init.circular_buffer, -1) == 112 &&
_.circular_buffer.get(init.circular_buffer, -2) == 111 &&
init.circular_buffer.array[_.array.struct.data][0] == 111 &&
init.circular_buffer.array[_.array.struct.data][1] == 112 &&
init.circular_buffer.array[_.array.struct.data][2] == 113 &&
_.circular_buffer.index.get(init.circular_buffer, -0) == 1 &&
_.circular_buffer.index.get(init.circular_buffer, -1) == 0 &&
_.circular_buffer.index.get(init.circular_buffer, -2) == 2 &&
_.circular_buffer.index.advance(init.circular_buffer) == 2 &&
_.circular_buffer.index.get(init.circular_buffer, -0) == 2
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.moving_average.simple: ";
init.moving_average.simple = _.moving_average.simple.new(3);
_.moving_average.simple.push(init.moving_average.simple, 100);
_.moving_average.simple.push(init.moving_average.simple, 30);
_.moving_average.simple.push(init.moving_average.simple, 50);
_.moving_average.simple.push(init.moving_average.simple, 25);
init.moving_average.simple[_.moving_average.simple.struct.sum] == 105 &&
_.moving_average.simple.get(init.moving_average.simple) == 35
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

#instance.tests += "_.rms: ";
init.rms = _.rms.new(3);
_.rms.push(init.rms, 100);
_.rms.push(init.rms, 30);
_.rms.push(init.rms, 50);
_.rms.push(init.rms, 25);
init.rms[_.moving_average.simple.struct.sum] == sqr(30) + sqr(50) + sqr(25) &&
_.rms.get(init.rms) == sqrt((sqr(30) + sqr(50) + sqr(25)) / 3)
? #instance.tests += "PASS\n"
: #instance.tests += "FAIL\n";

instance.noise.pinks = _.memory.new(num_ch);
init.channel = -1; loop(num_ch, init.channel += 1;
  instance.noise.pinks[init.channel] = _.noise.pink.new();
);
instance.noise.browns = _.memory.new(num_ch);
init.channel = -1; loop(num_ch, init.channel += 1;
  instance.noise.browns[init.channel] = _.noise.brown.new();
);

instance.delay_lines = _.memory.new(num_ch);
init.channel = -1; loop(num_ch, init.channel += 1;
  instance.delay_lines[init.channel] = _.circular_buffer.new(constant.delay.length.maximum + 1);
);
instance.delay_lines.array = _.array.new(constant.delay.length.maximum + 1);

instance.delay_lines.waveforms = _.memory.new(num_ch);
init.channel = -1; loop(num_ch, init.channel += 1;
  instance.delay_lines.waveforms[init.channel] = _.waveform.new(5000, constant.delay.length.maximum * 5);
);

instance.rms = _.rms.new(_.milliseconds_to_samples(300));

instance.filters.biquad.rbj = _.memory.new(num_ch);
init.channel = -1; loop(num_ch, init.channel += 1;
  instance.filters.biquad.rbj[init.channel] = _.filter.biquad.rbj.new();
);

instance.filters.biquad.svf = _.memory.new(num_ch);
init.channel = -1; loop(num_ch, init.channel += 1;
  init.filter = _.filter.biquad.svf.new();
  _.filter.biquad.svf.configure(init.filter, _.filter.biquad.svf.struct.type.bell, 15000, 6, 0.707);
  instance.filters.biquad.svf[init.channel] = init.filter;
);

instance.dft.samples = _.circular_buffer.new(2048);
instance.dft.reals = _.array.new(2048 / 2 + 1);
instance.dft.imaginaries = _.array.new(2048 / 2 + 1);
instance.dft.magnitudes = _.array.new(2048 / 2 + 1);
instance.dft.phases = _.array.new(2048 / 2 + 1);

@slider

slider_show(slider.noises.type, slider.page == slider.page.noises);
slider_show(slider.noises.gain.db, slider.page == slider.page.noises);
slider.noises.gain.amplitude = slider.noises.gain.db <= -60 ? 0 : _.db_to_amplitude(slider.noises.gain.db);

slider_show(slider.delay.length, slider.page == slider.page.circular_buffer);

slider_show(slider.rms, slider.page == slider.page.rms);

slider_show(slider.filter.biquad.rbj.type, slider.page == slider.page.filters.biquad.rbj);
slider.filter.biquad.rbj.struct.type =
    slider.filter.biquad.rbj.type == 0 ? _.filter.biquad.rbj.struct.type.low_pass
  : slider.filter.biquad.rbj.type == 1 ? _.filter.biquad.rbj.struct.type.high_pass
  : slider.filter.biquad.rbj.type == 2 ? _.filter.biquad.rbj.struct.type.band_pass.constant_skirt
  : slider.filter.biquad.rbj.type == 3 ? _.filter.biquad.rbj.struct.type.band_pass.constant_peak
  : slider.filter.biquad.rbj.type == 4 ? _.filter.biquad.rbj.struct.type.notch
  : slider.filter.biquad.rbj.type == 5 ? _.filter.biquad.rbj.struct.type.all_pass
  : slider.filter.biquad.rbj.type == 6 ? _.filter.biquad.rbj.struct.type.peaking
  : slider.filter.biquad.rbj.type == 7 ? _.filter.biquad.rbj.struct.type.low_shelf
  : slider.filter.biquad.rbj.type == 8 ? _.filter.biquad.rbj.struct.type.high_shelf;
slider_show(slider.filter.biquad.rbj.frequency, slider.page == slider.page.filters.biquad.rbj);
slider_show(
  slider.filter.biquad.rbj.gain,
  slider.page == slider.page.filters.biquad.rbj && (
    slider.filter.biquad.rbj.struct.type == _.filter.biquad.rbj.struct.type.peaking ||
    slider.filter.biquad.rbj.struct.type == _.filter.biquad.rbj.struct.type.low_shelf ||
    slider.filter.biquad.rbj.struct.type == _.filter.biquad.rbj.struct.type.high_shelf
  )
);
slider_show(
  slider.filter.biquad.rbj.width.type.non_shelving,
  slider.page == slider.page.filters.biquad.rbj && (
    slider.filter.biquad.rbj.struct.type != _.filter.biquad.rbj.struct.type.low_shelf &&
    slider.filter.biquad.rbj.struct.type != _.filter.biquad.rbj.struct.type.high_shelf
  )
);
slider_show(
  slider.filter.biquad.rbj.width.type.shelving,
  slider.page == slider.page.filters.biquad.rbj && (
    slider.filter.biquad.rbj.struct.type == _.filter.biquad.rbj.struct.type.low_shelf ||
    slider.filter.biquad.rbj.struct.type == _.filter.biquad.rbj.struct.type.high_shelf
  )
);
slider.filter.biquad.rbj.width.type.value =
  slider.filter.biquad.rbj.struct.type != _.filter.biquad.rbj.struct.type.low_shelf &&
  slider.filter.biquad.rbj.struct.type != _.filter.biquad.rbj.struct.type.high_shelf
  ? slider.filter.biquad.rbj.width.type.non_shelving
  : slider.filter.biquad.rbj.width.type.shelving;
slider.filter.biquad.rbj.width.type.non_shelving = min(slider.filter.biquad.rbj.width.type.value, 1);
slider.filter.biquad.rbj.width.type.shelving = slider.filter.biquad.rbj.width.type.value;
slider.filter.biquad.rbj.width.type =
    slider.filter.biquad.rbj.width.type.value == 0 ? _.filter.biquad.rbj.struct.width.type.Q
  : slider.filter.biquad.rbj.width.type.value == 1 ? _.filter.biquad.rbj.struct.width.type.bandwidth
  : slider.filter.biquad.rbj.width.type.value == 2 ? _.filter.biquad.rbj.struct.width.type.S;
slider_show(
  slider.filter.biquad.rbj.width.value.Q,
  slider.page == slider.page.filters.biquad.rbj && slider.filter.biquad.rbj.width.type == _.filter.biquad.rbj.struct.width.type.Q
);
slider_show(
  slider.filter.biquad.rbj.width.value.bandwidth,
  slider.page == slider.page.filters.biquad.rbj && slider.filter.biquad.rbj.width.type == _.filter.biquad.rbj.struct.width.type.bandwidth
);
slider_show(
  slider.filter.biquad.rbj.width.value.S,
  slider.page == slider.page.filters.biquad.rbj && slider.filter.biquad.rbj.width.type == _.filter.biquad.rbj.struct.width.type.S
);
slider.filter.biquad.rbj.width.value =
    slider.filter.biquad.rbj.width.type == _.filter.biquad.rbj.struct.width.type.Q ? slider.filter.biquad.rbj.width.value.Q
  : slider.filter.biquad.rbj.width.type == _.filter.biquad.rbj.struct.width.type.bandwidth ? slider.filter.biquad.rbj.width.value.bandwidth
  : slider.filter.biquad.rbj.width.type == _.filter.biquad.rbj.struct.width.type.S ? slider.filter.biquad.rbj.width.value.S;
slider.channel = -1; loop(num_ch, slider.channel += 1;
  _.filter.biquad.rbj.configure(
    instance.filters.biquad.rbj[slider.channel],
    slider.filter.biquad.rbj.struct.type,
    slider.filter.biquad.rbj.frequency,
    slider.filter.biquad.rbj.gain,
    slider.filter.biquad.rbj.width.type,
    slider.filter.biquad.rbj.width.value
  );
);

@serialize

"NOOP: Necessary to force some values into existence, for example, ‘num_ch’ in the ‘@init’ block";

@sample

slider.page == slider.page.noises ? (
  sample.channel = -1; loop(num_ch, sample.channel += 1;
    slider.noises.type == slider.noises.type.white ? (
      sample.noise = _.noise.white();
    )
    : slider.noises.type == slider.noises.type.pink ? (
      sample.noise.pink = instance.noise.pinks[sample.channel];
      sample.noise = _.noise.pink(sample.noise.pink);
    )
    : slider.noises.type == slider.noises.type.brown ? (
      sample.noise.brown = instance.noise.browns[sample.channel];
      sample.noise = _.noise.brown(sample.noise.brown);
    );
    spl(sample.channel) = sample.noise * slider.noises.gain.amplitude;
  );
)
: slider.page == slider.page.circular_buffer ? (
  sample.channel = -1; loop(num_ch, sample.channel += 1;
    sample.sample = spl(sample.channel);
    sample.delay_line = instance.delay_lines[sample.channel];
    sample.delay_line.waveform = instance.delay_lines.waveforms[sample.channel];
    _.circular_buffer.push(sample.delay_line, sample.sample);
    _.waveform.push(sample.delay_line.waveform, sample.sample);
    sample.old_sample = _.circular_buffer.get(sample.delay_line, -slider.delay.length);
    spl(sample.channel) = (sample.sample + sample.old_sample) * 0.5;
  );
)
: slider.page == slider.page.rms ? (
  _.rms.push(instance.rms, spl0);
  slider.rms = _.amplitude_to_db(_.rms.get(instance.rms));
)
: slider.page == slider.page.filters.biquad.rbj ? (
  sample.channel = -1; loop(num_ch, sample.channel += 1;
    spl(sample.channel) = _.filter.biquad.rbj.filter(instance.filters.biquad.rbj[sample.channel], spl(sample.channel));
  );
)
: slider.page == slider.page.filters.biquad.svf ? (
  sample.channel = -1; loop(num_ch, sample.channel += 1;
    spl(sample.channel) = _.filter.biquad.svf.filter(instance.filters.biquad.svf[sample.channel], spl(sample.channel));
  );
)
: slider.page == slider.page.discrete_fourier_transform ? (
  _.circular_buffer.push(instance.dft.samples, spl0);
);

//   _.width.extra_large.2     _.width.small
@gfx 672                       384

_.gfx();

gfx.width = _.width.extra_large.2 - _.space.2;
gfx.height = _.width.small - _.space.2;

_.background_color(_.color.gray.reaper);
_.color(_.color.gray.warm.50);
_.rounded_rectangle_fill(
  _.space.0,
  _.space.0,
  gfx.width,
  gfx.height,
  _.border_radius.large
);

gfx.body.padding = _.space.4;
gfx.body.gap = _.space.2;

gfx.title.height = _.line_height.extra_small;

_.print(
  slider.page == slider.page.bezier_curves
    ? "Bézier Curves"
    : slider.page == slider.page.color.1 ||
      slider.page == slider.page.color.2 ||
      slider.page == slider.page.color.3 ||
      slider.page == slider.page.color.4 ||
      slider.page == slider.page.color.5
    ? "_.color"
    : slider.page == slider.page.tests
    ? "Tests"
    : slider.page == slider.page.circular_buffer
    ? "Circular Buffer (Delay)"
    : slider.page == slider.page.rms
    ? "RMS"
    : slider.page == slider.page.filters.biquad.rbj
    ? "Filters · Biquad · RBJ"
    : slider.page == slider.page.filters.biquad.svf
    ? "Filters · Biquad · SVF"
    : slider.page == slider.page.discrete_fourier_transform
    ? "Discrete Fourier Transform",
  _.font_size.extra_small,
  _.font_style.bold,
  _.text_align.horizontal.left,
  _.text_align.vertical.top,
  _.text_overflow.visible,
  _.color.gray.warm.900,
  gfx.body.padding,
  gfx.body.padding,
  _.space.0,
  _.space.0
);

slider.page == slider.page.bezier_curves ? (
  gfx.padding = _.space.4;
  gfx.label.width = _.space.40;

  gfx.x = gfx.body.padding;
  gfx.y = gfx.body.padding + gfx.title.height + gfx.padding;
  _.print(
    "_.bezier.linear.draw()",
    _.font_size.extra_small,
    _.font_style.regular,
    _.text_align.horizontal.left,
    _.text_align.vertical.top,
    _.text_overflow.visible,
    _.color.gray.warm.700,
    gfx.x,
    gfx.y,
    _.space.0,
    _.space.0
  );
  _.bezier.linear.draw(
    gfx.x + gfx.label.width, gfx.y,
    gfx.x + gfx.label.width + _.space.8, gfx.y + _.space.8
  );
  
  gfx.y += _.space.20;
  _.print(
    "_.bezier.quadratic.draw()",
    _.font_size.extra_small,
    _.font_style.regular,
    _.text_align.horizontal.left,
    _.text_align.vertical.top,
    _.text_overflow.visible,
    _.color.gray.warm.700,
    gfx.x,
    gfx.y,
    _.space.0,
    _.space.0
  );
  _.bezier.quadratic.draw(
    gfx.x + gfx.label.width, gfx.y + _.space.10,
    gfx.x + gfx.label.width + _.space.16, gfx.y - _.space.10,
    gfx.x + gfx.label.width + _.space.32, gfx.y + _.space.10
  );
  
  gfx.y += _.space.20;
  _.print(
    "_.bezier.cubic.draw()",
    _.font_size.extra_small,
    _.font_style.regular,
    _.text_align.horizontal.left,
    _.text_align.vertical.top,
    _.text_overflow.visible,
    _.color.gray.warm.700,
    gfx.x,
    gfx.y,
    _.space.0,
    _.space.0
  );
  _.bezier.cubic.draw(
    gfx.x + gfx.label.width, gfx.y + _.space.10,
    gfx.x + gfx.label.width - _.space.2, gfx.y - _.space.10,
    gfx.x + gfx.label.width + _.space.20, gfx.y - _.space.10,
    gfx.x + gfx.label.width + _.space.32, gfx.y + _.space.10
  );
)
: slider.page == slider.page.color.1 ||
  slider.page == slider.page.color.2 ||
  slider.page == slider.page.color.3 ||
  slider.page == slider.page.color.4 ||
  slider.page == slider.page.color.5
? (
  _.print(
    "for example, _.color.gray.warm.700",
    _.font_size.extra_small,
    _.font_style.regular,
    _.text_align.horizontal.left,
    _.text_align.vertical.top,
    _.text_overflow.visible,
    _.color.gray.warm.700,
    gfx.body.padding + _.space.24,
    gfx.body.padding,
    _.space.0,
    _.space.0
  );

  gfx.palette.item.box.width = _.space.8;
  gfx.palette.item.box.height = _.space.8;
  gfx.palette.item.gap = _.space.1;
  gfx.palette.item.label.width = gfx.palette.item.box.width;
  gfx.palette.item.label.height = _.line_height.extra_small;
  gfx.palette.item.width = gfx.palette.item.box.width;
  gfx.palette.item.height = gfx.palette.item.box.height + gfx.palette.item.gap + gfx.palette.item.label.height;
  gfx.palette.label.width = _.space.20;
  gfx.palette.label.height = gfx.palette.item.box.height;
  gfx.palette.gap = _.space.4;

  gfx.palette.y = gfx.body.padding + gfx.title.height + gfx.body.gap - (gfx.palette.item.height + gfx.palette.gap);
  gfx.color.index = -1; loop(5, gfx.color.index += 1;
    gfx.palette.y += gfx.palette.item.height + gfx.palette.gap;

    _.print(
      slider.page == slider.page.color.1 ? (
        gfx.color.index == 0 ? "gray.blue" :
        gfx.color.index == 1 ? "gray.cool" :
        gfx.color.index == 2 ? "gray.medium" :
        gfx.color.index == 3 ? "gray.true" :
        gfx.color.index == 4 ? "gray.warm"
      ) :
      slider.page == slider.page.color.2 ? (
        gfx.color.index == 0 ? "red" :
        gfx.color.index == 1 ? "orange" :
        gfx.color.index == 2 ? "amber" :
        gfx.color.index == 3 ? "yellow" :
        gfx.color.index == 4 ? "lime"
      ) :
      slider.page == slider.page.color.3 ? (
        gfx.color.index == 0 ? "green" :
        gfx.color.index == 1 ? "emerald" :
        gfx.color.index == 2 ? "teal" :
        gfx.color.index == 3 ? "cyan" :
        gfx.color.index == 4 ? "sky"
      ) :
      slider.page == slider.page.color.4? (
        gfx.color.index == 0 ? "blue" :
        gfx.color.index == 1 ? "indigo" :
        gfx.color.index == 2 ? "violet" :
        gfx.color.index == 3 ? "purple" :
        gfx.color.index == 4 ? "fuchsia"
      ) :
      slider.page == slider.page.color.5 ? (
        gfx.color.index == 0 ? "pink" :
        gfx.color.index == 1 ? "rose" :
        gfx.color.index == 2 ? "gray.reaper" :
        gfx.color.index == 3 ? "black" :
        gfx.color.index == 4 ? "white"
      ),
      _.font_size.extra_small,
      _.font_style.regular,
      _.text_align.horizontal.left,
      _.text_align.vertical.center,
      _.text_overflow.visible,
      _.color.gray.warm.700,
      gfx.palette.gap,
      gfx.palette.y,
      gfx.palette.label.width,
      gfx.palette.label.height
    );

    gfx.shadeless =
      slider.page == slider.page.color.5 && (
        gfx.color.index == 2 ||
        gfx.color.index == 3 ||
        gfx.color.index == 4
      );

    gfx.palette.x = gfx.palette.gap + gfx.palette.label.width - gfx.palette.item.width;
    gfx.color.shade.index = -1; loop(gfx.shadeless ? 1 : 10, gfx.color.shade.index += 1;
      gfx.palette.x += gfx.palette.item.width + gfx.palette.gap;

      _.color(
        slider.page == slider.page.color.1 ? (
          gfx.color.index == 0 ? (
            gfx.color.shade.index == 0 ? _.color.gray.blue.50 :
            gfx.color.shade.index == 1 ? _.color.gray.blue.100 :
            gfx.color.shade.index == 2 ? _.color.gray.blue.200 :
            gfx.color.shade.index == 3 ? _.color.gray.blue.300 :
            gfx.color.shade.index == 4 ? _.color.gray.blue.400 :
            gfx.color.shade.index == 5 ? _.color.gray.blue.500 :
            gfx.color.shade.index == 6 ? _.color.gray.blue.600 :
            gfx.color.shade.index == 7 ? _.color.gray.blue.700 :
            gfx.color.shade.index == 8 ? _.color.gray.blue.800 :
            gfx.color.shade.index == 9 ? _.color.gray.blue.900;
          ) :
          gfx.color.index == 1 ? (
            gfx.color.shade.index == 0 ? _.color.gray.cool.50 :
            gfx.color.shade.index == 1 ? _.color.gray.cool.100 :
            gfx.color.shade.index == 2 ? _.color.gray.cool.200 :
            gfx.color.shade.index == 3 ? _.color.gray.cool.300 :
            gfx.color.shade.index == 4 ? _.color.gray.cool.400 :
            gfx.color.shade.index == 5 ? _.color.gray.cool.500 :
            gfx.color.shade.index == 6 ? _.color.gray.cool.600 :
            gfx.color.shade.index == 7 ? _.color.gray.cool.700 :
            gfx.color.shade.index == 8 ? _.color.gray.cool.800 :
            gfx.color.shade.index == 9 ? _.color.gray.cool.900;
          ) :
          gfx.color.index == 2 ? (
            gfx.color.shade.index == 0 ? _.color.gray.medium.50 :
            gfx.color.shade.index == 1 ? _.color.gray.medium.100 :
            gfx.color.shade.index == 2 ? _.color.gray.medium.200 :
            gfx.color.shade.index == 3 ? _.color.gray.medium.300 :
            gfx.color.shade.index == 4 ? _.color.gray.medium.400 :
            gfx.color.shade.index == 5 ? _.color.gray.medium.500 :
            gfx.color.shade.index == 6 ? _.color.gray.medium.600 :
            gfx.color.shade.index == 7 ? _.color.gray.medium.700 :
            gfx.color.shade.index == 8 ? _.color.gray.medium.800 :
            gfx.color.shade.index == 9 ? _.color.gray.medium.900;
          ) :
          gfx.color.index == 3 ? (
            gfx.color.shade.index == 0 ? _.color.gray.true.50 :
            gfx.color.shade.index == 1 ? _.color.gray.true.100 :
            gfx.color.shade.index == 2 ? _.color.gray.true.200 :
            gfx.color.shade.index == 3 ? _.color.gray.true.300 :
            gfx.color.shade.index == 4 ? _.color.gray.true.400 :
            gfx.color.shade.index == 5 ? _.color.gray.true.500 :
            gfx.color.shade.index == 6 ? _.color.gray.true.600 :
            gfx.color.shade.index == 7 ? _.color.gray.true.700 :
            gfx.color.shade.index == 8 ? _.color.gray.true.800 :
            gfx.color.shade.index == 9 ? _.color.gray.true.900;
          ) :
          gfx.color.index == 4 ? (
            gfx.color.shade.index == 0 ? _.color.gray.warm.50 :
            gfx.color.shade.index == 1 ? _.color.gray.warm.100 :
            gfx.color.shade.index == 2 ? _.color.gray.warm.200 :
            gfx.color.shade.index == 3 ? _.color.gray.warm.300 :
            gfx.color.shade.index == 4 ? _.color.gray.warm.400 :
            gfx.color.shade.index == 5 ? _.color.gray.warm.500 :
            gfx.color.shade.index == 6 ? _.color.gray.warm.600 :
            gfx.color.shade.index == 7 ? _.color.gray.warm.700 :
            gfx.color.shade.index == 8 ? _.color.gray.warm.800 :
            gfx.color.shade.index == 9 ? _.color.gray.warm.900;
          );
        ) :
        slider.page == slider.page.color.2 ? (
          gfx.color.index == 0 ? (
            gfx.color.shade.index == 0 ? _.color.red.50 :
            gfx.color.shade.index == 1 ? _.color.red.100 :
            gfx.color.shade.index == 2 ? _.color.red.200 :
            gfx.color.shade.index == 3 ? _.color.red.300 :
            gfx.color.shade.index == 4 ? _.color.red.400 :
            gfx.color.shade.index == 5 ? _.color.red.500 :
            gfx.color.shade.index == 6 ? _.color.red.600 :
            gfx.color.shade.index == 7 ? _.color.red.700 :
            gfx.color.shade.index == 8 ? _.color.red.800 :
            gfx.color.shade.index == 9 ? _.color.red.900;
          ) :
          gfx.color.index == 1 ? (
            gfx.color.shade.index == 0 ? _.color.orange.50 :
            gfx.color.shade.index == 1 ? _.color.orange.100 :
            gfx.color.shade.index == 2 ? _.color.orange.200 :
            gfx.color.shade.index == 3 ? _.color.orange.300 :
            gfx.color.shade.index == 4 ? _.color.orange.400 :
            gfx.color.shade.index == 5 ? _.color.orange.500 :
            gfx.color.shade.index == 6 ? _.color.orange.600 :
            gfx.color.shade.index == 7 ? _.color.orange.700 :
            gfx.color.shade.index == 8 ? _.color.orange.800 :
            gfx.color.shade.index == 9 ? _.color.orange.900;
          ) :
          gfx.color.index == 2 ? (
            gfx.color.shade.index == 0 ? _.color.amber.50 :
            gfx.color.shade.index == 1 ? _.color.amber.100 :
            gfx.color.shade.index == 2 ? _.color.amber.200 :
            gfx.color.shade.index == 3 ? _.color.amber.300 :
            gfx.color.shade.index == 4 ? _.color.amber.400 :
            gfx.color.shade.index == 5 ? _.color.amber.500 :
            gfx.color.shade.index == 6 ? _.color.amber.600 :
            gfx.color.shade.index == 7 ? _.color.amber.700 :
            gfx.color.shade.index == 8 ? _.color.amber.800 :
            gfx.color.shade.index == 9 ? _.color.amber.900;
          ) :
          gfx.color.index == 3 ? (
            gfx.color.shade.index == 0 ? _.color.yellow.50 :
            gfx.color.shade.index == 1 ? _.color.yellow.100 :
            gfx.color.shade.index == 2 ? _.color.yellow.200 :
            gfx.color.shade.index == 3 ? _.color.yellow.300 :
            gfx.color.shade.index == 4 ? _.color.yellow.400 :
            gfx.color.shade.index == 5 ? _.color.yellow.500 :
            gfx.color.shade.index == 6 ? _.color.yellow.600 :
            gfx.color.shade.index == 7 ? _.color.yellow.700 :
            gfx.color.shade.index == 8 ? _.color.yellow.800 :
            gfx.color.shade.index == 9 ? _.color.yellow.900;
          ) :
          gfx.color.index == 4 ? (
            gfx.color.shade.index == 0 ? _.color.lime.50 :
            gfx.color.shade.index == 1 ? _.color.lime.100 :
            gfx.color.shade.index == 2 ? _.color.lime.200 :
            gfx.color.shade.index == 3 ? _.color.lime.300 :
            gfx.color.shade.index == 4 ? _.color.lime.400 :
            gfx.color.shade.index == 5 ? _.color.lime.500 :
            gfx.color.shade.index == 6 ? _.color.lime.600 :
            gfx.color.shade.index == 7 ? _.color.lime.700 :
            gfx.color.shade.index == 8 ? _.color.lime.800 :
            gfx.color.shade.index == 9 ? _.color.lime.900;
          );
        ) :
        slider.page == slider.page.color.3 ? (
          gfx.color.index == 0 ? (
            gfx.color.shade.index == 0 ? _.color.green.50 :
            gfx.color.shade.index == 1 ? _.color.green.100 :
            gfx.color.shade.index == 2 ? _.color.green.200 :
            gfx.color.shade.index == 3 ? _.color.green.300 :
            gfx.color.shade.index == 4 ? _.color.green.400 :
            gfx.color.shade.index == 5 ? _.color.green.500 :
            gfx.color.shade.index == 6 ? _.color.green.600 :
            gfx.color.shade.index == 7 ? _.color.green.700 :
            gfx.color.shade.index == 8 ? _.color.green.800 :
            gfx.color.shade.index == 9 ? _.color.green.900;
          ) :
          gfx.color.index == 1 ? (
            gfx.color.shade.index == 0 ? _.color.emerald.50 :
            gfx.color.shade.index == 1 ? _.color.emerald.100 :
            gfx.color.shade.index == 2 ? _.color.emerald.200 :
            gfx.color.shade.index == 3 ? _.color.emerald.300 :
            gfx.color.shade.index == 4 ? _.color.emerald.400 :
            gfx.color.shade.index == 5 ? _.color.emerald.500 :
            gfx.color.shade.index == 6 ? _.color.emerald.600 :
            gfx.color.shade.index == 7 ? _.color.emerald.700 :
            gfx.color.shade.index == 8 ? _.color.emerald.800 :
            gfx.color.shade.index == 9 ? _.color.emerald.900;
          ) :
          gfx.color.index == 2 ? (
            gfx.color.shade.index == 0 ? _.color.teal.50 :
            gfx.color.shade.index == 1 ? _.color.teal.100 :
            gfx.color.shade.index == 2 ? _.color.teal.200 :
            gfx.color.shade.index == 3 ? _.color.teal.300 :
            gfx.color.shade.index == 4 ? _.color.teal.400 :
            gfx.color.shade.index == 5 ? _.color.teal.500 :
            gfx.color.shade.index == 6 ? _.color.teal.600 :
            gfx.color.shade.index == 7 ? _.color.teal.700 :
            gfx.color.shade.index == 8 ? _.color.teal.800 :
            gfx.color.shade.index == 9 ? _.color.teal.900;
          ) :
          gfx.color.index == 3 ? (
            gfx.color.shade.index == 0 ? _.color.cyan.50 :
            gfx.color.shade.index == 1 ? _.color.cyan.100 :
            gfx.color.shade.index == 2 ? _.color.cyan.200 :
            gfx.color.shade.index == 3 ? _.color.cyan.300 :
            gfx.color.shade.index == 4 ? _.color.cyan.400 :
            gfx.color.shade.index == 5 ? _.color.cyan.500 :
            gfx.color.shade.index == 6 ? _.color.cyan.600 :
            gfx.color.shade.index == 7 ? _.color.cyan.700 :
            gfx.color.shade.index == 8 ? _.color.cyan.800 :
            gfx.color.shade.index == 9 ? _.color.cyan.900;
          ) :
          gfx.color.index == 4 ? (
            gfx.color.shade.index == 0 ? _.color.sky.50 :
            gfx.color.shade.index == 1 ? _.color.sky.100 :
            gfx.color.shade.index == 2 ? _.color.sky.200 :
            gfx.color.shade.index == 3 ? _.color.sky.300 :
            gfx.color.shade.index == 4 ? _.color.sky.400 :
            gfx.color.shade.index == 5 ? _.color.sky.500 :
            gfx.color.shade.index == 6 ? _.color.sky.600 :
            gfx.color.shade.index == 7 ? _.color.sky.700 :
            gfx.color.shade.index == 8 ? _.color.sky.800 :
            gfx.color.shade.index == 9 ? _.color.sky.900;
          );
        ) :
        slider.page == slider.page.color.4? (
          gfx.color.index == 0 ? (
            gfx.color.shade.index == 0 ? _.color.blue.50 :
            gfx.color.shade.index == 1 ? _.color.blue.100 :
            gfx.color.shade.index == 2 ? _.color.blue.200 :
            gfx.color.shade.index == 3 ? _.color.blue.300 :
            gfx.color.shade.index == 4 ? _.color.blue.400 :
            gfx.color.shade.index == 5 ? _.color.blue.500 :
            gfx.color.shade.index == 6 ? _.color.blue.600 :
            gfx.color.shade.index == 7 ? _.color.blue.700 :
            gfx.color.shade.index == 8 ? _.color.blue.800 :
            gfx.color.shade.index == 9 ? _.color.blue.900;
          ) :
          gfx.color.index == 1 ? (
            gfx.color.shade.index == 0 ? _.color.indigo.50 :
            gfx.color.shade.index == 1 ? _.color.indigo.100 :
            gfx.color.shade.index == 2 ? _.color.indigo.200 :
            gfx.color.shade.index == 3 ? _.color.indigo.300 :
            gfx.color.shade.index == 4 ? _.color.indigo.400 :
            gfx.color.shade.index == 5 ? _.color.indigo.500 :
            gfx.color.shade.index == 6 ? _.color.indigo.600 :
            gfx.color.shade.index == 7 ? _.color.indigo.700 :
            gfx.color.shade.index == 8 ? _.color.indigo.800 :
            gfx.color.shade.index == 9 ? _.color.indigo.900;
          ) :
          gfx.color.index == 2 ? (
            gfx.color.shade.index == 0 ? _.color.violet.50 :
            gfx.color.shade.index == 1 ? _.color.violet.100 :
            gfx.color.shade.index == 2 ? _.color.violet.200 :
            gfx.color.shade.index == 3 ? _.color.violet.300 :
            gfx.color.shade.index == 4 ? _.color.violet.400 :
            gfx.color.shade.index == 5 ? _.color.violet.500 :
            gfx.color.shade.index == 6 ? _.color.violet.600 :
            gfx.color.shade.index == 7 ? _.color.violet.700 :
            gfx.color.shade.index == 8 ? _.color.violet.800 :
            gfx.color.shade.index == 9 ? _.color.violet.900;
          ) :
          gfx.color.index == 3 ? (
            gfx.color.shade.index == 0 ? _.color.purple.50 :
            gfx.color.shade.index == 1 ? _.color.purple.100 :
            gfx.color.shade.index == 2 ? _.color.purple.200 :
            gfx.color.shade.index == 3 ? _.color.purple.300 :
            gfx.color.shade.index == 4 ? _.color.purple.400 :
            gfx.color.shade.index == 5 ? _.color.purple.500 :
            gfx.color.shade.index == 6 ? _.color.purple.600 :
            gfx.color.shade.index == 7 ? _.color.purple.700 :
            gfx.color.shade.index == 8 ? _.color.purple.800 :
            gfx.color.shade.index == 9 ? _.color.purple.900;
          ) :
          gfx.color.index == 4 ? (
            gfx.color.shade.index == 0 ? _.color.fuchsia.50 :
            gfx.color.shade.index == 1 ? _.color.fuchsia.100 :
            gfx.color.shade.index == 2 ? _.color.fuchsia.200 :
            gfx.color.shade.index == 3 ? _.color.fuchsia.300 :
            gfx.color.shade.index == 4 ? _.color.fuchsia.400 :
            gfx.color.shade.index == 5 ? _.color.fuchsia.500 :
            gfx.color.shade.index == 6 ? _.color.fuchsia.600 :
            gfx.color.shade.index == 7 ? _.color.fuchsia.700 :
            gfx.color.shade.index == 8 ? _.color.fuchsia.800 :
            gfx.color.shade.index == 9 ? _.color.fuchsia.900;
          );
        ) :
        slider.page == slider.page.color.5 ? (
          gfx.color.index == 0 ? (
            gfx.color.shade.index == 0 ? _.color.pink.50 :
            gfx.color.shade.index == 1 ? _.color.pink.100 :
            gfx.color.shade.index == 2 ? _.color.pink.200 :
            gfx.color.shade.index == 3 ? _.color.pink.300 :
            gfx.color.shade.index == 4 ? _.color.pink.400 :
            gfx.color.shade.index == 5 ? _.color.pink.500 :
            gfx.color.shade.index == 6 ? _.color.pink.600 :
            gfx.color.shade.index == 7 ? _.color.pink.700 :
            gfx.color.shade.index == 8 ? _.color.pink.800 :
            gfx.color.shade.index == 9 ? _.color.pink.900;
          ) :
          gfx.color.index == 1 ? (
            gfx.color.shade.index == 0 ? _.color.rose.50 :
            gfx.color.shade.index == 1 ? _.color.rose.100 :
            gfx.color.shade.index == 2 ? _.color.rose.200 :
            gfx.color.shade.index == 3 ? _.color.rose.300 :
            gfx.color.shade.index == 4 ? _.color.rose.400 :
            gfx.color.shade.index == 5 ? _.color.rose.500 :
            gfx.color.shade.index == 6 ? _.color.rose.600 :
            gfx.color.shade.index == 7 ? _.color.rose.700 :
            gfx.color.shade.index == 8 ? _.color.rose.800 :
            gfx.color.shade.index == 9 ? _.color.rose.900;
          ) :
          gfx.color.index == 2 ? (
            _.color.gray.reaper;
          ) :
          gfx.color.index == 3 ? (
            _.color.black;
          ) :
          gfx.color.index == 4 ? (
            _.color.white;
          );
        )
      );
      _.rounded_rectangle_fill(
        gfx.palette.x,
        gfx.palette.y,
        gfx.palette.item.box.width,
        gfx.palette.item.box.height,
        _.border_radius.base
      );

      !gfx.shadeless ? _.print(
        gfx.color.shade.index == 0 ?  "50" :
        gfx.color.shade.index == 1 ? "100" :
        gfx.color.shade.index == 2 ? "200" :
        gfx.color.shade.index == 3 ? "300" :
        gfx.color.shade.index == 4 ? "400" :
        gfx.color.shade.index == 5 ? "500" :
        gfx.color.shade.index == 6 ? "600" :
        gfx.color.shade.index == 7 ? "700" :
        gfx.color.shade.index == 8 ? "800" :
        gfx.color.shade.index == 9 ? "900",
        _.font_size.extra_small,
        _.font_style.regular,
        _.text_align.horizontal.center,
        _.text_align.vertical.top,
        _.text_overflow.visible,
        _.color.gray.warm.700,
        gfx.palette.x,
        gfx.palette.y + gfx.palette.item.box.height + gfx.palette.item.gap,
        gfx.palette.item.label.width,
        gfx.palette.item.label.height
      );
    );
  );
)
: slider.page == slider.page.tests ? (
  _.print(
    #instance.tests,
    _.font_size.extra_small,
    _.font_style.regular,
    _.text_align.horizontal.left,
    _.text_align.vertical.top,
    _.text_overflow.visible,
    _.color.gray.warm.700,
    gfx.body.padding,
    gfx.body.padding + gfx.title.height,
    _.space.0,
    _.space.0
  );
)
: slider.page == slider.page.circular_buffer ? (
  gfx.waveform.height = (gfx.height - (gfx.body.padding + gfx.title.height)) / num_ch;
  gfx.y = gfx.body.padding + gfx.title.height - gfx.waveform.height; gfx.channel = -1; loop(num_ch, gfx.channel += 1; gfx.y += gfx.waveform.height;
    gfx.delay_line.waveform = instance.delay_lines.waveforms[gfx.channel];
    _.color(_.color.gray.warm.500);
    _.waveform.draw(
      gfx.delay_line.waveform,
      0,
      gfx.y,
      gfx.width,
      gfx.waveform.height
    );
  );
)
: slider.page == slider.page.discrete_fourier_transform ? (
  _.dft(instance.dft.samples, instance.dft.reals, instance.dft.imaginaries);
  // _.graphs.line(
  //   instance.dft.reals,
  //   0 * gfx_ext_retina,
  //   5 + (65 + 5 + 5) * 0 * gfx_ext_retina,
  //   400 * gfx_ext_retina,
  //   65 * gfx_ext_retina,
  //   1
  // );
  // _.graphs.line(
  //   instance.dft.imaginaries,
  //   0 * gfx_ext_retina,
  //   5 + (65 + 5 + 5) * 1 * gfx_ext_retina,
  //   400 * gfx_ext_retina,
  //   65 * gfx_ext_retina,
  //   1
  // );
  _.imaginary.rectangular_to_polar(instance.dft.reals, instance.dft.imaginaries, instance.dft.magnitudes, instance.dft.phases);
  _.graphs.line(
    instance.dft.magnitudes,
    0 * gfx_ext_retina,
    5 + (65 + 5 + 5) * 2 * gfx_ext_retina,
    400 * gfx_ext_retina,
    65 * gfx_ext_retina,
    1
  );
  // _.graphs.line(
  //   instance.dft.phases,
  //   0 * gfx_ext_retina,
  //   5 + (65 + 5 + 5) * 3 * gfx_ext_retina,
  //   400 * gfx_ext_retina,
  //   65 * gfx_ext_retina,
  //   1
  // );
);
