// Cookbook formulae for audio EQ biquad filter coefficients
// ----------------------------------------------------------------------------
//           by Robert Bristow-Johnson  <rbj@audioimagination.com>


// http://blog.bjornroche.com/2012/08/basic-audio-eqs.html


slider1:type=0<0,7,1{LPF,HPF,BPF,notch,APF,peakingEQ,lowShelf,highShelf}>Type
slider2:f0=440<20,20000,0.1>Frequency (Hz)
slider3:Q=1<0.001,100,0.001>Q
slider4:dBgain=0<-144,20,0.1>Gain (dB)

@init

LPF = 0;
HPF = 1;
BPF = 2;
notch = 3;
APF = 4;
peakingEQ = 5;
lowShelf = 6;
highShelf = 7;

@slider

Fs = srate;
A = sqrt(10^(dBgain/20));
w0 = 2*$pi*f0/Fs;
alpha = sin(w0) / (2 * Q);

type == LPF ? (
  b0 =  (1 - cos(w0))/2;
  b1 =   1 - cos(w0);
  b2 =  (1 - cos(w0))/2;
  a0 =   1 + alpha;
  a1 =  -2*cos(w0);
  a2 =   1 - alpha;
);

type == HPF ? (
  b0 =  (1 + cos(w0))/2;
  b1 = -(1 + cos(w0));
  b2 =  (1 + cos(w0))/2;
  a0 =   1 + alpha;
  a1 =  -2*cos(w0);
  a2 =   1 - alpha;
);

type == BPF ? (
  b0 =   sin(w0)/2;
  b1 =   0;
  b2 =  -sin(w0)/2;
  a0 =   1 + alpha;
  a1 =  -2*cos(w0);
  a2 =   1 - alpha;
);

type == notch ? (
  b0 =   1;
  b1 =  -2*cos(w0);
  b2 =   1;
  a0 =   1 + alpha;
  a1 =  -2*cos(w0);
  a2 =   1 - alpha;
);

type == APF ? (
  b0 =   1 - alpha;
  b1 =  -2*cos(w0);
  b2 =   1 + alpha;
  a0 =   1 + alpha;
  a1 =  -2*cos(w0);
  a2 =   1 - alpha;
);

type == peakingEQ ? (
  b0 =   1 + alpha*A;
  b1 =  -2*cos(w0);
  b2 =   1 - alpha*A;
  a0 =   1 + alpha/A;
  a1 =  -2*cos(w0);
  a2 =   1 - alpha/A;
);

type == lowShelf ? (
  b0 =    A*( (A+1) - (A-1)*cos(w0) + 2*sqrt(A)*alpha );
  b1 =  2*A*( (A-1) - (A+1)*cos(w0)                   );
  b2 =    A*( (A+1) - (A-1)*cos(w0) - 2*sqrt(A)*alpha );
  a0 =        (A+1) + (A-1)*cos(w0) + 2*sqrt(A)*alpha;
  a1 =   -2*( (A-1) + (A+1)*cos(w0)                   );
  a2 =        (A+1) + (A-1)*cos(w0) - 2*sqrt(A)*alpha;
);

type == highShelf ? (
  b0 =    A*( (A+1) + (A-1)*cos(w0) + 2*sqrt(A)*alpha );
  b1 = -2*A*( (A-1) + (A+1)*cos(w0)                   );
  b2 =    A*( (A+1) + (A-1)*cos(w0) - 2*sqrt(A)*alpha );
  a0 =        (A+1) - (A-1)*cos(w0) + 2*sqrt(A)*alpha;
  a1 =    2*( (A-1) - (A+1)*cos(w0)                   );
  a2 =        (A+1) - (A-1)*cos(w0) - 2*sqrt(A)*alpha;
);

b0 /= a0;
b1 /= a0;
b2 /= a0;
a1 /= a0;
a2 /= a0;

@sample

x = spl0;

y = b0 * x + b1 * xmem1 + b2 * xmem2 - a1 * ymem1 - a2 * ymem2;

xmem2 = xmem1;
xmem1 = x;
ymem2 = ymem1;
ymem1 = y;

spl0 = spl1 = y;
