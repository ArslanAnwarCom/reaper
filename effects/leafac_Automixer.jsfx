desc:leafac_Automixer

// https://github.com/leafac/reaper

/*
Video processor:

// Automixer video editor
//@gmem=leafac_Automixer

gfx_blit(input_track(gmem[0]));
*/

slider1:bypassed=0<0,1,1{Enabled,Bypassed}>Â 

slider3:channels_per_track=2<2,32,2>Channels per track
slider4:rms_size_ms=300<0,1000,.1>Reaction time (RMS size in ms)
slider5:strength=1<0,5,.01>Strength

slider20:track_gain_maximum_difference_db=-20<-60,0,.1>-Track gain maximum difference (dB)
slider21:track_gain_maximum_debounce_ms=350<0,1000,.1>-Track gain maximum reaction time (ms)

slider33:1<0,10,0.1>Track 1 priority
slider34:1<0,10,0.1>Track 2 priority
slider35:1<0,10,0.1>Track 3 priority
slider36:1<0,10,0.1>Track 4 priority
slider37:1<0,10,0.1>-Track 5 priority
slider38:1<0,10,0.1>-Track 6 priority
slider39:1<0,10,0.1>-Track 7 priority
slider40:1<0,10,0.1>-Track 8 priority
slider41:1<0,10,0.1>-Track 9 priority
slider42:1<0,10,0.1>-Track 10 priority
slider43:1<0,10,0.1>-Track 11 priority
slider44:1<0,10,0.1>-Track 12 priority
slider45:1<0,10,0.1>-Track 13 priority
slider46:1<0,10,0.1>-Track 14 priority
slider47:1<0,10,0.1>-Track 15 priority
slider48:1<0,10,0.1>-Track 16 priority
slider49:1<0,10,0.1>-Track 17 priority
slider50:1<0,10,0.1>-Track 18 priority
slider51:1<0,10,0.1>-Track 19 priority
slider52:1<0,10,0.1>-Track 20 priority
slider53:1<0,10,0.1>-Track 21 priority
slider54:1<0,10,0.1>-Track 22 priority
slider55:1<0,10,0.1>-Track 23 priority
slider56:1<0,10,0.1>-Track 24 priority
slider57:1<0,10,0.1>-Track 25 priority
slider58:1<0,10,0.1>-Track 26 priority
slider59:1<0,10,0.1>-Track 27 priority
slider60:1<0,10,0.1>-Track 28 priority
slider61:1<0,10,0.1>-Track 29 priority
slider62:1<0,10,0.1>-Track 30 priority
slider63:1<0,10,0.1>-Track 31 priority
slider64:1<0,10,0.1>-Track 32 priority

options:no_meter gmem=leafac_Automixer

@slider

tracks_maximum = 64 / 2;
tracks = num_ch / channels_per_track;
rms_size_samples = max(1, ceil(srate * rms_size_ms / 1000));
rms_sample_counter = -1;
track_gain_maximum_difference_amplitude = 10^(track_gain_maximum_difference_db / 20);
track_gain_maximum_debounce_samples = max(1, ceil(srate * track_gain_maximum_debounce_ms / 1000));

memtop = 0;
tracks_priorities = memtop; memtop += tracks_maximum;
tracks_squares = memtop; memtop += tracks * rms_size_samples;
tracks_sums_squares = memtop; memtop += tracks;
tracks_rmss = memtop; memtop += tracks;
tracks_gains_unnormalized = memtop; memtop += tracks;
tracks_gains = memtop; memtop += tracks;
tracks_rmss_gained = memtop; memtop += tracks;
memset(0, 0, memtop);
freembuf(memtop + 1);

track = -1; loop(tracks_maximum, track += 1;
  tracks_priorities[track] = slider(33 + track);
);

@sample

rms_sample_counter += 1; rms_sample_counter == rms_size_samples ? rms_sample_counter -= rms_size_samples;

sum_of_tracks_rmss = 0;
track = -1; loop(tracks, track += 1;
  track_square = 0;
  channel = -1; loop(channels_per_track, channel += 1;
    track_square += sqr(spl(track * channels_per_track + channel));
  );
  track_square /= channels_per_track;
  track_sum_squares =
    tracks_sums_squares[track] +
    track_square -
    tracks_squares[track * rms_size_samples + rms_sample_counter];
  track_rms = sqrt(track_sum_squares / rms_size_samples);

  tracks_squares[track * rms_size_samples + rms_sample_counter] = track_square;
  tracks_sums_squares[track] = track_sum_squares;
  tracks_rmss[track] = track_rms;
  sum_of_tracks_rmss += track_rms;
);

sum_of_tracks_gains_unnormalized = 0;
track = -1; loop(tracks, track += 1;
  track_gain_unnormalized = tracks_rmss[track] / sum_of_tracks_rmss * tracks_priorities[track];
  track_gain_unnormalized = track_gain_unnormalized^strength / (track_gain_unnormalized^strength + (1 - track_gain_unnormalized)^strength);

  tracks_gains_unnormalized[track] = track_gain_unnormalized;
  sum_of_tracks_gains_unnormalized += track_gain_unnormalized;
);

track_gain_maximum_track = -1;
track_gain_maximum_gain = -1;
track = -1; loop(tracks, track += 1;
  track_gain = tracks_gains_unnormalized[track] / sum_of_tracks_gains_unnormalized;
  bypassed ? track_gain = 1;
  track_rms_gained = tracks_rmss[track] * track_gain;

  tracks_gains[track] = track_gain;
  tracks_rmss_gained[track] = track_rms_gained;

  channel = -1; loop(channels_per_track, channel += 1;
    sample_gained = spl(track * channels_per_track + channel) * track_gain;
    spl(track * channels_per_track + channel) = 0;
    spl(channel) += sample_gained;
  );

  track_gain_maximum_gain < track_gain ? (
    track_gain_maximum_track = track;
    track_gain_maximum_gain = track_gain;
  );
);
abs(track_gain_maximum_gain - tracks_gains[gmem[0]]) < track_gain_maximum_difference_amplitude ? (
  track_gain_maximum_debounce = track_gain_maximum_debounce_samples;
) : (
  track_gain_maximum_debounce -= 1;
  track_gain_maximum_debounce == 0 ? gmem[0] = track_gain_maximum_track;
);

@serialize

version = 110;
file_var(0, version);

@gfx 530 180

gfx_set(1);
gfx_center_horizontally = 1;
gfx_center_vertically = 4;

meter_width = 10;
meter_height = 100;
meter_minimum_value = -62;

title_height = 30;

track_width = meter_width * 5;
track_height = meter_height + title_height;
track_padding = 30;

legend_padding_left = 10;
legend_padding_bottom = 15;

columns = max(1, floor((gfx_w - track_padding) / (track_width + track_padding)));

track_gfx = -1; loop(tracks, track_gfx += 1;
  track_x = track_gfx % columns;
  track_y = floor(track_gfx / columns);
  track_left = (track_padding + track_width) * track_x + track_padding;
  track_top = (track_padding + track_height) * track_y + track_padding;
  track_right = track_left + track_width;
  track_meters_bottom = track_top + meter_height;
  track_bottom = track_top + track_height;

  gfx_x = track_left;
  gfx_y = track_meters_bottom;
  gfx_rectto(
    gfx_x + meter_width,
    gfx_y - max(1, min(meter_height,
      meter_height * (meter_minimum_value - 20 * log10(tracks_rmss[track_gfx])) / meter_minimum_value
    ))
  );

  gfx_x = track_left + meter_width * 2.5;
  gfx_y = track_meters_bottom;
  gfx_lineto(gfx_x, gfx_y - meter_height);
  gfx_x = track_left + meter_width * 2;
  gfx_y = track_meters_bottom - meter_height * tracks_gains[track_gfx];
  gfx_lineto(gfx_x + meter_width, gfx_y);

  gfx_x = track_left + meter_width * 4;
  gfx_y = track_meters_bottom;
  gfx_rectto(
    gfx_x + meter_width,
    gfx_y - max(1, min(meter_height,
      meter_height * (meter_minimum_value - 20 * log10(tracks_rmss_gained[track_gfx])) / meter_minimum_value
    ))
  );
  
  gfx_x = track_left;
  gfx_y = track_meters_bottom;
  sprintf(#title, "%d", track_gfx + 1);
  track_gfx == gmem[0] ? gfx_g = gfx_b = 0;
  gfx_drawstr(#title, gfx_center_horizontally | gfx_center_vertically, track_right, track_bottom);
  gfx_g = gfx_b = 1;
);

gfx_g = gfx_b = 0;
gfx_x = legend_padding_left;
gfx_y = gfx_h - legend_padding_bottom;
gfx_drawstr("Video track");
